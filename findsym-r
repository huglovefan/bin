#!/usr/bin/luajit
--
-- like findsym but this finds binaries that use the symbol
--

local cachedir = os.getenv('XDG_CACHE_HOME')
              or string.format('%s/.cache', (os.getenv('HOME') or ''))
local cachefile = string.format('%s/symbols.r', cachedir)

local shellquote = function (s)
	return '\'' .. s:gsub('\'', '\'\\\'\'') .. '\''
end
local generate_sh = [==[
mkdir /tmp/findsym-r.$$ || exit
cleanup() {
	rm -f /tmp/findsym-r.$$/*
	rmdir /tmp/findsym-r.$$
}
trap 'cleanup' EXIT
trap 'exit 1' HUP INT TERM
export R=/tmp/findsym-r.$$
export AWK_CMD='
	/^!f/ { print(substr($0, 2)); }
	# line from readelf
	$3==0&&($4=="FUNC"||$4=="OBJECT")&&$5=="GLOBAL"&&$6!="HIDDEN"&&$7=="UND" {
		# remove the first 7 fields
		# cannot use $8 because the symbol might contain spaces
		#    ^^ cannot use apostrophe because this is in single quotes
		sub("^[\t ]*[^\t ]+[\t ]+[^\t ]+" \
		     "[\t ]+[^\t ]+[\t ]+[^\t ]+" \
		     "[\t ]+[^\t ]+[\t ]+[^\t ]+" \
		     "[\t ]+[^\t ]+[\t ]*", "s");
		sub("@.*", ""); # version thing
		print;
	}
'
find /bin /usr/bin -type f -executable -print0 | xargs -0 -P 3 -n 64 -r /bin/sh -c '
for f; do
	>&2 printf "%s\n" "$f"
	printf "!f%s\n" "$f"
	llvm-readelf -W --demangle --dyn-syms "$f"
done | awk "$AWK_CMD" >>"$R/$$"
' --
find \
	/lib* \
	/usr/lib* \
\( \
	-name 'lib?*.so' -or \
	-name 'lib?*.so.[0-9]*' -or \
	-name 'lib?*.a' \
\) -not -name '*.debug' -type f -print0 | xargs -0 -P 3 -n 64 -r /bin/sh -c '
for f; do
	>&2 printf "%s\n" "$f"
	printf "!f%s\n" "$f"
	case $f in
	*.so.[0-9]*|*.so)
		llvm-readelf -W --demangle --dyn-syms "$f"
		;;
	*.a)
		llvm-readelf -W --demangle --syms "$f"
		;;
	esac
done | awk "$AWK_CMD" >>"$R/$$"
' --
cat /tmp/findsym-r.$$/* >]==]..shellquote(cachefile)..'\n'..[==[
]==]

if arg[1] == '-g' then
	os.execute(generate_sh)
	if #arg == 1 then os.exit(0) end
	arg = {select(2, unpack(arg))}
end
if #arg == 0 then
	io.stderr:write('usage: findsym [-g] <pattern> ...\n')
	os.exit(1)
end

-- i don't like this but no other terminal command uses lua patterns
local glob2pat = function (glob)
	local t = {}
	local i = 1
	if not glob:find('^%*') then
		t[1] = '^'
	end
	if glob:find('%*$') then
		t.laststar = true
	end
	while i <= #glob do
		local c = glob:sub(i, i)
		if c == '%' then
			t[#t+1] = '%%'
		elseif c == '*' then
			if i > 1 and i < #glob then
				t[#t+1] = '.*'
			end
		elseif c == '?' then
			t[#t+1] = '.'
		elseif c == '[' then
			i = i + 1
			t[#t+1] = '['
			if glob:sub(i, i) == '!' then
				i = i + 1
				t[#t+1] = '^'
			end
			while true do
				local c = glob:sub(i, i)
				assert(c, 'unterminated character class')
				if c == '%' then
					t[#t+1] = '%%'
				elseif c == '\\' then
					t[#t+1] = '%'
					t[#t+1] = glob:sub(i+1, i+1)
					i = i + 1
				elseif c == ']' then
					t[#t+1] = ']'
					break
				else
					t[#t+1] = glob:sub(i, i)
				end
				i = i + 1
			end
		elseif c == '\\' then
			t[#t+1] = '%'
			t[#t+1] = glob:sub(i+1, i+1)
			i = i + 1
		else
			t[#t+1] = c
		end
		i = i + 1
	end
	if not t.laststar then
		t[#t+1] = '$'
	end
	return table.concat(t, '')
end

local pats = {}
for i = 1, #arg do
	pats[#pats+1] = glob2pat(arg[i])
end

local es = string.byte('s')
local ef = string.byte('f')

local f = assert(io.open(cachefile, "r"))
local file = nil
for line in f:lines() do
	if line:byte(1) == es then
		for i = 1, #pats do
			if line:find(pats[i], 2) then
				print(file:sub(2), line:sub(2))
			end
		end
	elseif line:byte(1) == ef then
		file = line
	end
end
f:close()
