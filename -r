#!/usr/bin/tcc -run
//
// run a command in a loop, retrying if it fails
//

#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

static double ms(void) {
	struct timespec ts;
	clock_gettime(CLOCK_MONOTONIC, &ts);
	return (double)ts.tv_sec * 1000.0 + (double)ts.tv_nsec / 1000000.0;
}

int main(int argc, char **argv) {
	if (argc <= 1) {
		fprintf(stderr, "usage: -r <command>\n");
		exit(1);
	}
again:;
	double start = ms();
	pid_t pid = fork();
	if (pid == -1) {
		perror("-r: fork");
		exit(1);
	} else if (pid == 0) {
		execvp(argv[1], argv+1);
		perror("-r: execvp");
		_exit(1);
	}

	for (;;) {
		int status;
		if (-1 == waitpid(pid, &status, 0)) {
			perror("-r: waitpid");
			exit(1);
		}
		if (WIFEXITED(status)) {
			if (0 == WEXITSTATUS(status)) {
				exit(0);
			} else {
				fprintf(stderr, "-r: child exited with status %d\n",
				    WEXITSTATUS(status));
				break;
			}
		}
		if (WIFSIGNALED(status)) {
			fprintf(stderr, "-r: child killed by signal %d\n",
			    WTERMSIG(status));
			break;
		}
	}

	double end = ms();
	double elapsed = end-start;

	if (elapsed < 1000.0) {
		double delay = 1000.0-elapsed;
		if (-1 == usleep(delay*1000.0)) {
			perror("-r: usleep");
			exit(1);
		}
	}

	goto again;
}
