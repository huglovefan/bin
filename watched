#!/bin/sh
#
# watched [-a] [-d] [-e] [-l] [-w] [words]
#   -a: show ancient entries (default: 2wk, -a: 1mo, -aa: 3mo, -aaa: all)
#   -d: delete entries instead of printing (must specify a filter)
#   -e: existing files only
#   -l: long output (full paths)
#   -w: watch file (open in mpv)
#   words: show only files containing words
#

aflag=0
while getopts 'adelw' o; do
	case $o in
	a)      aflag=$((aflag+1));;
	[delw]) eval ${o}flag=1;;
	*)      exit 1;;
	esac
done
shift $((OPTIND-1))

has_filter=
if [ $# -gt 0 ]; then
	# - split the command line into "words" (including only characters that can be matched as-is by sh and sed)
	# - build a shell match function and sed expression based on that
	# example: "[SubGroup] show name - 01.mkv"
	# -> shell pattern "*SubGroup*show*-*name*01*mkv*"
	# -> sed expression: (same thing but with .* instead of *)
	set -o noglob # don't try to match filenames here
	nonword='[-/]' # non-\w characters to also match
	regex="\\w(\\w|${nonword})*|${nonword}+\\w(\\w|${nonword})*"
	set -- $(printf '%s\n' "$@" | grep -Eao "$regex" | sed 's/[a-z]/[\u\0\l\0]/gi')
	set +o noglob
	if [ $# -gt 0 ]; then
		has_filter=1
		code="test_filter() { case \$1 in *"
		sed="s,"
		for word; do
			shift
			code="$code$word"
			sed="$sed$word"
			if [ $# -gt 0 ]; then
				code="$code*"
				sed="$sed\|"
			fi
		done
		code="$code*) return 0;; *) return 1;; esac; }"
		sed="$sed,\\x1b[1m\\0\\x1b[0m,g"
		eval "$code"
	fi
	output_highlight_fn() {
		sed "$sed"
	}
else
	# no keywords to highlight -> just dim unimportant stuff
	pat='s/((?!)'
	# [brackets]
	pat="$pat|"'\[[^\]]*\]'
	# (parens)
	pat="$pat|"'\([^)]*\)'
	# optional youtube-dl video id (twitter or youtube)
	# file extension
	# optional ".torrent"
	pat="$pat|"'(?:-(?:[A-Za-z0-9]{11}|[0-9]{19}))?\.[A-Za-z0-9_]+(?:\.torrent)?$'
	# ".torrent" at the end of a directory name
	pat="$pat|"'\.torrent(?=\/)'
	# some non-word characters
	# (the lookbehind prevents this from matching the date/time part of the output)
	pat="$pat|"'(?<=........)[-_.~]+'
	# "v2" in episode number
	pat="$pat|"'(?<=\b[0-9]{2,3})v[0-9]\b'
	pat="$pat)/\x1b[2m\1\x1b[0m/g"
	output_highlight_fn() {
		perl -pe "no warnings 'experimental'; $pat"
	}
fi

cd ~/.config/mpv/watch_later || exit

list_savedata() {
	timexpr=
	if [ $aflag -eq 0 ]; then
		timexpr="-mtime -$((14+1))"
	elif [ $aflag -eq 1 ]; then
		timexpr="-mtime -$((31+1))"
	elif [ $aflag -eq 2 ]; then
		timexpr="-mtime -$((31*3+1))"
	fi
	find . \
	    -mindepth 1 -maxdepth 1 \
	    -type f \
	    ${timexpr} \
	    -printf '%TF %TT %P\n'
}

read_savedata() {
	wfile=
	while read -r date time hash; do
		IFS= read -r line <"$hash"
		case $line in
		'# '*) path=${line#\# };;
		*)     continue;;
		esac
		if [ -n "$has_filter" ] && ! test_filter "$path"; then
			continue
		fi
		if [ -n "$eflag" ] && ! [ -e "$path" ]; then
			continue
		fi
		if [ -z "$wflag" ]; then
			if [ -z "$lflag" ]; then
				path=${path##*/}
			fi
			printf '%s %s %s\n' "$date" "${time%%.*}" "$path"
		else
			wfile=$path
		fi
	done
	if [ -n "$wflag" ]; then
		printf '%s\n' "$wfile"
	fi
}

delete_savedata() {
	if ! [ -n "$has_filter" -a -n "$dflag" ]; then
		return 1
	fi
	while read -r date time hash; do
		IFS= read -r line <"$hash"
		case $line in
		'# '*) path=${line#\# };;
		*)     continue;;
		esac
		if [ -n "$eflag" ] && ! [ -e "$path" ]; then
			continue
		fi
		if test_filter "$path"; then
			rm -fv -- "$hash"
		fi
	done
}

highlight_output() {
	if [ -t 1 ]; then
		output_highlight_fn | tsnip
	else
		cat
	fi
}

watch_or_die() {
	if [ -n "$1" ]; then
		# looks like a path?
		case $1 in /?*)
			if [ ! -e "$1" ]; then
				>&2 echo "error: the file to watch doesn't exist!"
				>&2 echo "the full path is: $1"
				exit 1
			fi
		esac
		exec mpv -- "$1"
	else
		>&2 echo "watched: no matching files!"
		exit 1
	fi
}

if [ -n "$has_filter" ]; then
	if [ -n "$dflag" ]; then
		if [ -n "$wflag" ]; then
			>&2 echo "watched: -d and -w can't be used together"
			exit 1
		fi
		list_savedata | delete_savedata
	else
		if [ -n "$wflag" ]; then
			watch_or_die "$(list_savedata | read_savedata)"
		else
			list_savedata | read_savedata | highlight_output
		fi
	fi
else
	if [ -n "$dflag" ]; then
		>&2 echo "watched: -d can only be used when a filter is specified"
		exit 1
	fi
	if [ -n "$wflag" ]; then
		watch_or_die "$(list_savedata | sort | read_savedata)"
	else
		list_savedata | sort | read_savedata | highlight_output
	fi
fi
